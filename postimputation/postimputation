#!/usr/bin/env python
"""
A prototype for the ricopili post-imputation pipeline. Uses MAGMA as an
example tool.
"""

from snakemake import snakemake
import argparse as arg
import subprocess as sp
import yaml
import os
import sys

from pkg_resources import resource_filename


def eat_logs(log_dict):
    """
    Eat the snakemake print-to-commandline logs.
    """
    pass


def __main__():

    # repo_root = os.path.dirname(os.path.abspath(__file__)).strip("src/snakemake/")

    # parse command line arguments
    parser = arg.ArgumentParser()
    parser.add_argument("--mode", action="store", dest="mode", choices=["drmaa", "qsub", "local"])
    parser.add_argument("--daner", action="store", dest="daner")
    parser.add_argument("--output-dir", action="store", dest="output_dir")
    parser.add_argument("--ref-1000g", action="store", dest="ref_1000g")
    parser.add_argument("--sample-size", action="store", dest="study_sample_size")
    parser.add_argument("--ref-gene-loc", action="store", dest="ref_gene_loc",
                        default=resource_filename(
                            "postimputation.ricopili_magma",
                            "resources/magma_linux/reference_data/NCBI37.3.gene.loc"))
    args = parser.parse_args()

    # put together the snakemake config
    config = {"magma_bin": resource_filename("postimputation.ricopili_magma",
                                             "resources/magma_linux/magma")}
    config.update(vars(args))
    if not os.path.exists(args.output_dir):
        os.makedirs(args.output_dir)

    config_file = os.path.join(args.output_dir, "config.yaml")
    with open(config_file, 'w') as config_conn:
        yaml.dump(config, config_conn, default_flow_style=True)

    # try and use the UGER module in case we are on the broad server
    try:
        sp.call(["use", "UGER"])
    except FileNotFoundError:
        pass

    # put together the call to snakemake
    snakemake_api_call = {
        "snakefile": resource_filename("postimputation.ricopili_magma",
                                       "Snakefile"),
        # log_handler=eat_logs,
        "configfile": config_file,
        # config=config, # blerg -- why doesn't this work?
        "latency_wait": 60
    }

    if args.mode == "drmaa":
        snakemake_api_call["drmaa"] = " -l h_vmem={cluster.h_vmem} "
        snakemake_api_call["cluster_config"] = resource_filename(
            "postimputation.ricopili_magma", "cluster_config.yaml")
    elif args.mode == "qsub":
        snakemake_api_call["cluster"] = "qsub -l mem={cluster.h_vmem}b -lwalltime={cluster.walltime}"
        snakemake_api_call["cluster_config"] = resource_filename(
            "postimputation.ricopili_magma", "cluster_config.yaml")
    elif args.mode == "local":
        pass

    # execute MAGMA workflow
    success = snakemake(**snakemake_api_call)

    # check status
    if success:
        print("Success!")
        sys.exit(0)
    else:
        print("Postimputation execution of MAGMA failed.")
        sys.exit(1)


if __name__ == "__main__":
    __main__()
